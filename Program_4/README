# CSC 453 - Program 4: TinyFS Implementation

**Team Members:** Emanuel Gonzalez and Hector Pule

## Implementation Status

Our TinyFS implementation is fully functional with all requirements all done. The file system includes a working disk emulator (AKA libDisk) with all four required functions and a complete TinyFS interface with all nine mandatory functions. All 37 test cases pass without errors, demonstrating that our mount/unmount operations work correctly, file operations handle data properly, and the file descriptor system manages resources appropriately.

## Additional Features

We implemented two additional features to meet the 30% requirement. First, we added read-only and writeByte support which includes functions to make files read-only or read-write, write individual bytes to files, and enforce read-only protection that prevents writing or deleting protected files. Second, we implemented directory listing and renaming functionality that allows users to list all files in the filesystem and rename files while preventing duplicate names and preserving file content during rename operations.

## Project Files

**Core Implementation Files:**
- **tinyfs.py** - Main TinyFS implementation with all 9 required functions and both additional features
- **libDisk.py** - Disk emulator with 4 required functions (openDisk, readBlock, writeBlock, closeDisk)
- **constants.py** - System constants including BLOCK_SIZE = 256, magic numbers, and file limits  
- **fs_structures.py** - File system data structures (SuperBlock, INode, FileExtent, BlockAttributes)

**Test and Demo Files:**
- **tinyfsTest.py** - Comprehensive test suite with all 37 test cases that verify core functionality
- **demo_additional_features.py** - Demonstrates read-only and writeByte features
- **demo_directory_features.py** - Demonstrates directory listing and renaming features

**Supporting Files:**
- **diskTest.py** - Basic disk testing utilities
- **bigTest.py** - Additional testing programs
- **Makefile** - Build configuration for compilation

## Design and Limitations

Our implementation uses a simplified in-memory file storage system with 256-byte blocks and a magic number verification system for mounting. The file system supports up to 8-character filenames and maintains a flat directory structure without hierarchical directories. Key limitations include that files only exist in memory during the session rather than being persistently stored to disk blocks, directory operations only work on currently open files, and we do not implement actual disk space management or timestamps. Despite these limitations, all required functionality works correctly and our additional features are fully demonstrated through comprehensive test programs.

## Special Instructions
**Post Mark:** I want to graduate... please.
